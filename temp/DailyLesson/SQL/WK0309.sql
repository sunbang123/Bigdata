SELECT STUDENT*
FROM STUDENT
CROSS JOIN
ENROL;

--EQUAL JOIN()
SELECT * FROM STUDENT;
SELECT * FROM ENROL;
SELECT STUDENT.STU_NO,STU_NAME,STU_DEPT,ENR_GRADE
FROM STUDENT,ENROL
WHERE STUDENT.STU_NO=ENROL.STU_NO;

--FROM절에서 진행되는 JOIN()
--NATURAL JOIN() JOIN~USING() JOIN~ON()
SELECT STU_NO,STU_NAME,STU_DEPT,ENR_GRADE
FROM STUDENT NATURAL JOIN ENROL; -- 2개만 있으면 됩니다.

SELECT STU_NO,STU_NAME,STU_DEPT,ENR_GRADE
FROM STUDENT JOIN ENROL USING(STU_NO);

SELECT STUDENT.STU_NO,STU_NAME,STU_DEPT,ENR_GRADE
FROM STUDENT JOIN ENROL ON(STUDENT.STU_NO=ENROL.STU_NO);

--101번과목을 수강하는 학생들의 학번과 이름을 검색하여라.
SELECT * FROM STUDENT;
SELECT * FROM ENROL;
SELECT ENROL.STU_NO,STU_NAME
FROM STUDENT,ENROL
WHERE STUDENT.STU_NO=ENROL.STU_NO
AND SUB_NO=101;

SELECT STU_NO,STU_NAME
FROM STUDENT NATURAL JOIN ENROL
WHERE SUB_NO=101;

--추가조건이 2개이상이 된다면 문제가 될 수 있음.
SELECT ENROL.STU_NO,STU_NAME
FROM STUDENT,ENROL
WHERE STUDENT.STU_NO=ENROL.STU_NO
AND (SUB_NO=101 OR SUB_NO=102);

--전통적인 조인문을 사용하여 '컴퓨터개론과목'을 수강하는 학생들의
--학번 이름,과목이름을 출력하라?
SELECT * FROM SUBJECT;
SELECT * FROM STUDENT;
SELECT * FROM ENROL;

SELECT STUDENT.STU_NO,SUB_NAME
FROM STUDENT,ENROL,SUBJECT
WHERE STUDENT.STU_NO=ENROL.STU_NO
AND ENROL.SUB_NO=SUBJECT.SUB_NO;

SELECT STU_NO,SUB_NAME
FROM STUDENT NATURAL JOIN ENROL NATURAL JOIN SUBJECT;

SELECT STU_NO,SUB_NAME
FROM STUDENT JOIN ENROL USING(STU_NO)
JOIN SUBJECT USING(SUB_NO);

SELECT ENROL.STU_NO,SUB_NAME
FROM STUDENT JOIN ENROL ON(STUDENT.STU_NO=ENROL.STU_NO)
JOIN SUBJECT ON(ENROL.SUB_NO=SUBJECT.SUB_NO);

--NON EQUAL JOIN()
SELECT * FROM EMP;
SELECT * FROM SALGRADE;
SELECT EMPNO,ENAME,GRADE
FROM EMP,SALGRADE
WHERE SAL BETWEEN LOSAL AND HISAL;

--사원테이블에서 자신의 상급자를 출력하라?
--SELF JOIN()?
SELECT * FROM EMP;
SELECT A.EMPNO 사원번호,A.ENAME 사원이름,
B.EMPNO 상급자사원번호,B.ENAME 상급자이름
FROM EMP A, EMP B
WHERE A.MGR=B.EMPNO;

--OUTER JOIN()
SELECT * FROM ENROL;
SELECT * FROM SUBJECT ORDER BY SUB_NO;
SELECT * FROM ENROL NATURAL JOIN SUBJECT
ORDER BY SUB_NO;

SELECT A.*,SUB_NAME
FROM ENROL A RIGHT OUTER JOIN SUBJECT
ON(A.SUB_NO=SUBJECT.SUB_NO)
ORDER BY 1;

--부질의?
--질의문이 2개. SELECT안에 SELECT문.
--SELECT()~SELECT()이 있는 것?
--학생테이블에서 옥성우 학생보다 큰 학생의 학번, 이름, 신장을 출력하라?
SELECT STU_HEIGHT
FROM STUDENT
WHERE STU_NAME='옥성우';

SELECT STU_NO,STU_NAME,STU_HEIGHT
FROM STUDENT
WHERE STU_HEIGHT> (SELECT STU_HEIGHT
FROM STUDENT
WHERE STU_NAME='옥성우');

--학생테이블에서 박희철 학생과 같은 몸무게를 가지고 있는 학생의 정보를 출력하라?
SELECT * FROM STUDENT
WHERE STU_WEIGHT=(SELECT STU_WEIGHT
FROM STUDENT
WHERE STU_NAME='박희철')
AND STU_NAME<>'박희철';
        -- Direction, Redirection : 예외처리

--학생테이블에서 '컴퓨터정보'학과 같은 반인 다른학과의 학생정보를 IN을 사용하여
--출력하라?
SELECT * FROM STUDENT ORDER BY STU_CLASS;
SELECT *
FROM STUDENT
WHERE STU_CLASS IN (SELECT STU_CLASS
FROM STUDENT
WHERE STU_DEPT='컴퓨터정보')
AND STU_DEPT<>'컴퓨터정보';

--학생테이블에서 신장이 학생들의 평균신장보다 큰학생을 구하시오?
SELECT *
FROM STUDENT
WHERE STU_HEIGHT>(SELECT AVG(STU_HEIGHT)
FROM STUDENT);
--학생테이블에서 모든 학과들의 평균신장보다 큰학생의 정보를 구하라?
SELECT *
FROM STUDENT
WHERE STU_HEIGHT>ALL(SELECT AVG(STU_HEIGHT)
FROM STUDENT GROUP BY STU_DEPT);

--복수열부질의?
--기존테이블에서 새로운 테이블을 생성시키고자 할때,

SELECT * FROM EMP;
CREATE TABLE TEST(EMPNO,ENAME,SAL,COMM,DEPTNO)
AS
SELECT EMPNO,ENAME,SAL,COMM,DEPTNO
FROM EMP
WHERE DEPTNO=1;
SELECT * FROM TEST;
DESC TEST;
INSERT INTO TEST VALUES(11,'APPLE',1000,NULL,30);
INSERT INTO TEST VALUES(12,'BANANA',2000,10,30);
INSERT INTO TEST VALUES(13,'CHEESE',1000,0,10);
INSERT INTO TEST VALUES(14,'DOC',2000,NULL,20);
INSERT INTO TEST VALUES(15,'EGG',1000,100,20);

SELECT * FROM TEST;

--집합연산자?
--UNION/ UNION ALL/INTERSECT/MINUS
--교집합
CREATE TABLE A_STUDENT
AS
SELECT *
FROM STUDENT
WHERE STU_DEPT IN('기계','전기전자');

CREATE TABLE B_STUDENT
AS
SELECT *
FROM STUDENT
WHERE STU_DEPT IN('전기전자','컴퓨터정보');
SELECT * FROM A_STUDENT;
SELECT * FROM B_STUDENT;
SELECT * FROM A_STUDENT
MINUS
SELECT * FROM B_STUDENT;

SELECT TABLE_NAME FROM USER_TABLES;